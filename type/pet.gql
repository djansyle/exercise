enum PetColor {
  WHITE
  BROWN
  BLACK
  ORANGE
}

enum PetType {
  CAT
  DOG
}

enum Breed {
  # Dogs
  LABRADOR_RETRIEVER
  PUG
  BEAGLE
  SIBERIAN_HUSKY
  BULLDOG

  # Cats
  PERSIAN
  RUSSIAN
  BENGEL
  MAINE_COON
  RAGDOLL
  BIRMAN
}

interface Pet {
  id: ID!
  name: String!
  color: PetColor!
  age: UInt!
  owner: Owner
  breed: Breed!
}

type Cat implements Pet {
  id: ID!
  name: String!
  color: PetColor!
  age: UInt!
  breed: Breed!
  owner: Owner
}

type Dog implements Pet {
  id: ID!
  name: String!
  color: PetColor!
  age: UInt!
  breed: Breed!
  owner: Owner
}

type PetsEdge {
  cursor: String!
  node: Pet!
}

type PetsConnection {
  totalCount: UInt!
  edges: [PetsEdge!]!
  pageInfo: PageInfo!
}

input CreatePetInput {
  type: PetType!
  name: String!
  color: PetColor!
  age: UInt!
  breed: Breed!
  owner: ID
}

input EditPetInput {
  type: PetType
  name: String
  color: PetColor
  age: UInt
  owner: ID
  breed: Breed
}

input PetsFilterInput {
  owner: ID
}

type Mutation {
  createPet(input: CreatePetInput!): ID!
  editPet(id: ID!, input: EditPetInput!): Boolean!
}

type Query {
  pets(first: UInt, after: String, filter: PetsFilterInput): PetsConnection!
}
