enum PetColor {
  WHITE
  BROWN
  BLACK
  ORANGE
}

enum PetBreed {
  CAT
  DOG
}

interface Pet {
  id: ID!
  name: String!
  color: PetColor!
  age: UInt!
  breed: PetBreed!
  owner: Owner
}

type Cat implements Pet {
  id: ID!
  name: String!
  color: PetColor!
  age: UInt!
  breed: PetBreed!
  owner: Owner
}

type Dog implements Pet {
  id: ID!
  name: String!
  color: PetColor!
  age: UInt!
  breed: PetBreed!
  owner: Owner
}

type PetsEdge {
  cursor: String!
  node: Pet!
}

type PetsConnection {
  totalCount: UInt!
  edges: [PetsEdge!]!
  pageInfo: PageInfo!
}

input CreatePetInput {
  breed: PetBreed!
  name: String!
  color: PetColor!
  age: UInt!
  owner: ID
}

input EditPetInput {
  breed: PetBreed
  name: String
  color: PetColor
  age: UInt
  owner: ID
}

input PetsFilterInput {
  owner: ID
}

type Mutation {
  createPet(input: CreatePetInput): ID!
  editPet(pet: ID!, input: EditPetInput!): Boolean!
}

type Query {
  pets(first: UInt, after: String, filter: PetsFilterInput): PetsConnection!
}
